print <<-print
	
	Case Expressions
	The Ruby case expression is a powerful beast
	a multiway if on steroids.
	and just to make it even more powerful, it comes in two flavors.
	
	The first form is fairly close to a series of if staements it lets you list a series of conditions
	and execute a statement corresponding to the first one that's true
	print
	
print <<-loop
	
	Loops
	The 'while' loop executs its body zero or more times as long as its condition is true. 
	for example, this common idiom reads until the input is exhausted:
	while line = gets
	end
	
	The 'until' loop is the opposite; it executes the body until the condition becomes true.
	
	as with if and unless, you can use both of the loops as statement modifiers.
	loop
	
	a = 1
	a *= 2 while a < 100
p	a
	a -= 10 until a <100
p	a

	c = 2
	c *=2 while c < 10000
p	c

print <<-loop

	on page 139
	a range can be used as a kind of flip-flop, returning true when some event happens and then
	staying true until a second event occurs. this facility is normally used within loops.

	loop

	file = File.open("ordinal.txt")
	while line = file.gets
		puts(line) if line =~ /third/ .. line =~ /fifth/
	end
	
File.foreach("ordinal.txt") do |line|
	if (($. ==1) || line =~ /eig/) .. (($. == 3) || line =~ /nin/)
		print line
	end

end

print "hello\n" while false
begin
print "goodbye\n"
end while false

print <<-it

	Iterators
	Ruby uses methods defined in varuos built=in classes
	to provide equivalent, but less error-prone, functionality.
	
	it
	
3.times do
	print "Ho! "
end

0.upto(50) do |x|
	print x, " ** "	
end

puts "\na loop from 0 to 12 by 3"
0.step(12, 3) {|x| print x, " "}

puts"\niterating over arrays and other containers is easy if you use their each method"
[1 , 1, 2, 3, 5].each {|val| print val, " "}

print <<-and

	Once a class supports each, the additional methods in the Enumerable module
	(page 478, 80) become availagle. For example, the File class provides an each method, 
	which returns each line of a file in turn.
	using the grep method in Ecumerable, we could iterate over only those 
	lines that end with a d:
	and
	
	File.open("ordinal.txt").grep(/d$/) do |line|
		puts line
	end
	
#last, and probably least, is the most basic loop of all.
#ruby provides a built-in iterator called loop:

#you can use for to iterate over any objects that responds to the method each, 
#such as an Array or a Range.
for i in ['fee', 'fi', 'fo', 'fum']
	print i, " "
end
for i in 1..3
	print i, " "
end
for i in File.open("ordinal.txt").find_all {|line| line =~ /d$/}
	print i.chomp, " "
end
#as long as your class defines a sensible each method,
#you can use a for loop to traverse its objects.
class Periods
	def each
		yield "classica"
		yield "Jazz"
		yield "Rock"
	end
end

periods = Periods.new
for genre in periods
	print genre, " "
	end
puts "\n\n\n"
class Bitches
	def each
		yield "hoodhoe"
		yield "sluthoe"
		yield "fathoe"
		yield "highhoe"
	end
end

hoes = Bitches.new
for hi in hoes
	print hi, " "
end

print <<-break

	Break, Redo, Next
	The loop control constructs break, redo, and next let you alter the
	normal flow through a loop ot iterator.
	
	break terminateds the immediately enclosing loop; control resumes at
	the statment following the block.
	
	redo repeats current iteration of the loop from the start but
	without reevaluating the
	condition or fetching the next element (in an iterator). 
	
	next skips to the end of the loop, effectively starting the next iteration.
	
	break
	
#	while line = gets
#		next if line =~ /^\s*#/
#		break if line =~ /^END/
#		#sub stuff in backticks and try again
#		redo if line.gsub!(/`(.*?)`/) {eval($1) }
#		#process line...
#	end
	
	i=0
	loop do
		i +=1
		next if i < 3
		print i
		break if i > 4
	end

puts "\n\n\ntype next to break"
result = while line = gets
	break(line) if line =~ /\w/
end

print <<-var

	Variable Scope, Loops, and Blocks.
	The while, until, and for loops are built into the language and do 
	not introduce new scope.
	
	The blocks used by iterators (such as loop and each) are a little 
	different.
	Normally, the local variables created in thes blocks are not accessible 
	outside the block.

	[1, 2, 3].each do |x|
		y = x + 1
	end
	
	However, if at the time the block executes a local variable already exists with
	the same name as that of a variable in the blok, the existing local variable will 
	be used in the block. its value will therefore be available after the block finishes.
	as the folloing example shos, this applies to normal variables in the block but
	not to the block's	parameters.
	var
	
	x= "ititial value"
	y = "another value"
	[1,2,3,4].each do |x|
		y = x + 1
	end
p	[x, y]

#note that assigment to the variable doesn't have to be executed, the
#ruby interpreter just needs to have seen that the variable exists on the left side of an assignment:
if false
	a = "never used"
end
3.times {|i| a = i}

p a

#ruby 1.9 introduced the concept of block-local variables.
#these are listed in the block's parameter list,
#preceded by a semicolon. contrast this code, wich does not use block locals
square = "yes"
total = 0
[1,2,3,4].each do |val|
	square = val * val
	total += square
end
puts "total = #{total}"
puts "square = #{square}"

#with the following code, which uses a block-local variable, so square in the outer scope is not affected by a variable of the sae name within
#the block:

square = "yes"
total = 0
[1,2,3].each do |val; square|
	square = val * val
	total += square
end
puts "Total = #{total}"
puts "square = #{square}"















	